/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Lock {
            bindings = <&kp LG(L)>;
            key-positions = <40 49>;
            require-prior-idle-ms = <250>;
        };

        BT0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <30 43>;
            require-prior-idle-ms = <250>;
        };

        BT1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <31 44>;
            require-prior-idle-ms = <250>;
        };

        BT2 {
            bindings = <&bt BT_CLR>;
            key-positions = <32 45>;
            require-prior-idle-ms = <250>;
        };

        BTClear {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <33 46>;
            require-prior-idle-ms = <250>;
        };

        ParenthesisCOMBO {
            bindings = <&ParenthesisC>;
            key-positions = <7 9>;
            require-prior-idle-ms = <250>;
        };

        BracketCOMBO {
            bindings = <&BracketC>;
            key-positions = <21 19>;
            require-prior-idle-ms = <250>;
        };

        CurlyCOMBO {
            bindings = <&CurlyC>;
            key-positions = <37 35>;
            require-prior-idle-ms = <250>;
        };

        AngleCOMBO {
            bindings = <&AngleC>;
            key-positions = <36 37>;
            require-prior-idle-ms = <250>;
        };

        LParen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 8>;
            require-prior-idle-ms = <250>;
        };

        RParen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
            require-prior-idle-ms = <250>;
        };

        LBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <20 19>;
            require-prior-idle-ms = <250>;
        };

        RBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <20 21>;
            require-prior-idle-ms = <250>;
        };

        LCurly {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <36 35>;
            require-prior-idle-ms = <250>;
        };

        RCurly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <36 37>;
            require-prior-idle-ms = <250>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 12>;
            require-prior-idle-ms = <250>;
        };

        Exc {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
            require-prior-idle-ms = <250>;
        };

        At {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
            require-prior-idle-ms = <250>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <15 3>;
            require-prior-idle-ms = <250>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
            require-prior-idle-ms = <250>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
            require-prior-idle-ms = <250>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            require-prior-idle-ms = <250>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
            require-prior-idle-ms = <250>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <20 8>;
            require-prior-idle-ms = <250>;
        };

        HomeShiftEndCombo {
            bindings = <&HomeShiftEnd>;
            key-positions = <21 22>;
            require-prior-idle-ms = <250>;
        };

        Paste1 {
            bindings = <&Paste1>;
            key-positions = <28 13>;
            require-prior-idle-ms = <250>;
        };

        Paste2 {
            bindings = <&Paste2>;
            key-positions = <28 14>;
            require-prior-idle-ms = <250>;
        };

        Paste3 {
            bindings = <&Paste3>;
            key-positions = <28 15>;
            require-prior-idle-ms = <250>;
        };

        PasteClip {
            bindings = <&kp LG(V)>;
            key-positions = <28 16>;
            require-prior-idle-ms = <250>;
        };

        Undo {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
            require-prior-idle-ms = <250>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
            require-prior-idle-ms = <250>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
            require-prior-idle-ms = <250>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 29>;
            require-prior-idle-ms = <250>;
        };

        AsteriskSurroundCOMBO {
            bindings = <&AsteriskSurround>;
            key-positions = <19 18>;
            require-prior-idle-ms = <250>;
        };

        LBootLoader {
            bindings = <&bootloader>;
            key-positions = <41 42 43>;
            require-prior-idle-ms = <250>;
        };

        RBootLoader {
            bindings = <&bootloader>;
            key-positions = <47 46 48>;
            require-prior-idle-ms = <250>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <9 21>;
            require-prior-idle-ms = <250>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <10 22>;
            require-prior-idle-ms = <250>;
        };

        cBackspace {
            bindings = <&kp RC(BACKSPACE)>;
            key-positions = <11 23>;
            require-prior-idle-ms = <250>;
        };
    };

    macros {
        ParenthesisC: Parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "PARENTHESES";
        };

        BracketC: BracketC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETC";
        };

        CurlyC: CurlyC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_BRACKET) &kp LS(RIGHT_BRACKET) &kp LEFT>;
            label = "CURLYC";
        };

        AngleC: AngleC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA) &kp LS(PERIOD) &kp LEFT>;
            label = "ANGLEC";
        };

        HomeShiftEnd: HomeShiftEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "HOMESHIFTEND";
        };

        Paste3: Paste3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V) &kp DOWN &kp DOWN &kp DOWN &kp ENTER>;
            label = "PASTE2";
        };

        Paste2: Paste2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V) &kp DOWN &kp DOWN &kp ENTER>;
            label = "PASTE3";
        };

        Paste1: Paste1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V) &kp DOWN &kp ENTER>;
            label = "PASTE1";
        };

        AsteriskSurround: AsteriskSurround {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ASTERISK &kp END &kp ASTRK>;
            label = "ASTERISKSURROUND";
        };
    };

    behaviors {
        LockScreen: LockScreen {
            compatible = "zmk,behavior-hold-tap";
            label = "LOCKSCREEN";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            flavor = "tap-preferred";
        };

        DELsBACK: DELsBACK {
            compatible = "zmk,behavior-mod-morph";
            label = "DELSBACK";
            bindings = <&kp DELETE>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    sensors {
        left_config { triggers-per-rotation = <36>; };

        right_config { triggers-per-rotation = <6>; };
    };

    keymap {
        compatible = "zmk,keymap";

        Alphas {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E    |  R   |  T   |                                      |  Y   |  U   |  I    |  O   |   P   | BCKSP |
            // |  TAB  |  A  |  S  |  D    |  F   |  G   |                                      |  H   |  J   |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C    |  V   |  B   | DELETE  | ENTER |  |  WIN  | TOG(1)  |  N   |  M   |  ,    |  .   |  / \  | ENTER |
            //                     | PRTSC |  ALT | CTRL | L(2)/SP | SHIFT |  |  L(3) | L(2)/SP | CTRL |  ALT | PL/PA |

            bindings = <
&kp ESC     &kp Q  &kp W  &kp E            &kp R         &kp T                                                                   &kp Y              &kp U     &kp I                           &kp O    &kp P                &kp BACKSPACE
&kp TAB     &kp A  &kp S  &kp D            &kp F         &kp G                                                                   &kp H              &kp J     &kp K                           &kp L    &kp SEMICOLON        &kp SQT
&caps_word  &kp Z  &kp X  &kp C            &kp V         &kp B             &DELsBACK       &kp ENTER  &kp CAPSLOCK  &tog 1       &kp N              &kp M     &kp COMMA                       &kp DOT  &mt BACKSLASH SLASH  &kp ENTER
                          &kp PRINTSCREEN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &mo 2      &mo 2         &lt 3 SPACE  &kp RIGHT_CONTROL  &kp RWIN  &LockScreen LG(L) C_PLAY_PAUSE
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp C_NEXT C_PREV>;
        };

        GalliumV1 {
            bindings = <
&trans  &kp B  &kp L  &kp D   &kp C   &kp V                                   &kp Z   &kp Y   &kp O   &kp U   &kp SEMI  &trans
&trans  &kp N  &kp R  &kp T   &kp S   &kp G                                   &kp P   &kp H   &kp A   &kp E   &kp I     &trans
&trans  &kp Q  &kp X  &kp M   &kp W   &kp J   &trans  &trans  &trans  &trans  &kp K   &kp F   &trans  &trans  &trans    &trans
                      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        NumLayer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | NMLCK | / F12 | 7 F7 | 8 F8 | 9 F9 |  - _ |                                         |  /   |  7   |  8   |  9   | - _ |      |
            // |  =    | * F11 | 4 F4 | 5 F5 | 6 F6 |  +   |                                         |  *   |  4   |  5   |  6   | +   |  =   |
            // |       | 0 F10 | 1 F1 | 2 F2 | 3 F3 |  .   | BCKSP|      |      |      |      |      |  0   |  1   |  2   |  3   | .   |      |
            //                        |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&kp KP_NUMLOCK  &mt F12 SLASH        &mt F7 KP_NUMBER_7  &mt F8 KP_NUMBER_8  &mt F9 KP_NUMBER_9  &kp MINUS                                   &kp SLASH        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS   &trans
&trans          &mt F11 ASTERISK     &mt F4 KP_NUMBER_4  &mt F5 KP_NUMBER_5  &mt F6 KP_NUMBER_6  &kp PLUS                                    &kp ASTERISK     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS    &kp EQUAL
&kp EQUAL       &mt F10 KP_NUMBER_0  &mt F1 KP_NUMBER_1  &mt F2 KP_NUMBER_2  &mt F3 KP_NUMBER_3  &kp PERIOD  &trans  &trans  &trans  &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &trans
                                                         &trans              &trans              &trans      &trans  &trans  &trans  &trans  &trans           &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_FAST_FORWARD C_REWIND>;
        };

        NavLayer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |      |      |      |      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |                                         | HOME |  UP  | END  |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      | LEFT | DOWN | RGHT |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans  &trans    &trans          &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans  &kp HOME  &kp UP_ARROW    &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>,
                <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };
    };
};
